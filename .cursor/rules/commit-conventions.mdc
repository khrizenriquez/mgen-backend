---
alwaysApply: true
description: Commit message conventions following Karma Runner style guidelines
---

# Commit Message Conventions

## Format
Follow the Karma Runner commit message style (https://karma-runner.github.io/6.3/dev/git-commit-msg.html):

```
<type>(<scope>): <subject>

<body>

<footer>
```

## Type
Must be one of the following:
- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools

## Scope
The scope should indicate what part of the codebase is affected:
- **logging**: Changes to logging infrastructure
- **backend**: General backend changes
- **database**: Database schema or model changes
- **api**: API endpoint changes
- **docker**: Docker configuration changes
- **tests**: Test-related changes

## Subject
- Use imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No dot (.) at the end
- Maximum 50 characters

## Body
- Use imperative, present tense
- Include motivation for the change and contrast with previous behavior
- Wrap at 72 characters

## Examples

### Feature Addition
```
feat(logging): implement structured logging with JSON format and centralized storage

- Add structured logging configuration with JSON output format
- Implement correlation middleware for request tracing with UUID generation
- Add PII masking for sensitive data (emails, phone numbers, tokens, passwords)
- Create global exception handler with consistent error logging
- Configure Loki and Promtail for centralized log storage and collection

Closes #87 #88
```

### Bug Fix
```
fix(backend): update models and controllers to match real database schema

- Update SQLAlchemy models to match schema.sql structure
- Fix DonationModel to use real database columns (amount_gtq, status_id, etc.)
- Update domain entity to work with actual database schema
- Fix repository implementation for UUID IDs and new column names

Resolves database schema mismatch that was causing 500 errors
```

### Documentation
```
docs(api): add API documentation for donation endpoints

- Document request/response schemas
- Add example usage for each endpoint
- Include error response formats
```

## Breaking Changes
- Include "BREAKING CHANGE:" in the footer
- Describe what changed and migration path

## Language
- Write commit messages in native English
- Use clear, descriptive language
- Avoid technical jargon when possible

## Branch Workflow
- Create feature branches from develop: `feature/logging-configuration`
- No automatic merges to develop
- All commits made only on feature branch
- No automatic pushes to remote